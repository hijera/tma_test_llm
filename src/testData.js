/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram WebApp
 */

import { devConfig, shouldEnableMocks, shouldShowDevTools, devLog } from './devConfig.js'

// –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const testUsers = [
  {
    id: 123456789,
    first_name: '–ò–≤–∞–Ω',
    last_name: '–ü–µ—Ç—Ä–æ–≤',
    username: 'ivan_petrov',
    photo_url: 'https://i.pravatar.cc/300?img=12',
    language_code: 'ru'
  },
  {
    id: 987654321,
    first_name: '–ê–Ω–Ω–∞',
    last_name: '–°–º–∏—Ä–Ω–æ–≤–∞',
    username: 'anna_smirnova',
    photo_url: 'https://i.pravatar.cc/300?img=25',
    language_code: 'ru'
  },
  {
    id: 456789123,
    first_name: '–ê–ª–µ–∫—Å–µ–π',
    last_name: '–ö–æ–∑–ª–æ–≤',
    username: 'alex_kozlov',
    photo_url: 'https://i.pravatar.cc/300?img=33',
    language_code: 'ru'
  },
  {
    id: 789123456,
    first_name: '–ú–∞—Ä–∏—è',
    last_name: '–í–æ–ª–∫–æ–≤–∞',
    username: 'maria_volkova',
    photo_url: 'https://i.pravatar.cc/300?img=44',
    language_code: 'ru'
  },
  {
    id: 321654987,
    first_name: 'John',
    last_name: 'Smith',
    username: 'john_smith',
    photo_url: 'https://i.pravatar.cc/300?img=8',
    language_code: 'en'
  }
]

// –†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑–∏—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const testSettings = [
  {
    hideId: false,
    cardColor: '#2196F3',
    showDescription: true,
    description: 'Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ Vue.js, Node.js –∏ –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
    showWebsite: true,
    website: 'https://github.com/ivan-petrov'
  },
  {
    hideId: true,
    cardColor: '#E91E63',
    showDescription: true,
    description: 'UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –°–æ–∑–¥–∞—é –∫—Ä–∞—Å–∏–≤—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.',
    showWebsite: true,
    website: 'https://dribbble.com/anna-smirnova'
  },
  {
    hideId: false,
    cardColor: '#4CAF50',
    showDescription: true,
    description: 'DevOps –∏–Ω–∂–µ–Ω–µ—Ä –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É.',
    showWebsite: false,
    website: ''
  },
  {
    hideId: true,
    cardColor: '#FF9800',
    showDescription: true,
    description: '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏ SMM —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü–æ–º–æ–≥–∞—é –±—Ä–µ–Ω–¥–∞–º —Ä–∞—Å—Ç–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.',
    showWebsite: true,
    website: 'https://linkedin.com/in/maria-volkova'
  },
  {
    hideId: false,
    cardColor: '#9C27B0',
    showDescription: true,
    description: 'Software Engineer and Tech Lead. Passionate about clean code and scalable architectures.',
    showWebsite: true,
    website: 'https://johnsmith.dev'
  }
]

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
export const testProfiles = testUsers.map((user, index) => ({
  userData: user,
  settings: testSettings[index] || testSettings[0]
}))

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
export function getRandomTestProfile() {
  const randomIndex = Math.floor(Math.random() * testProfiles.length)
  return testProfiles[randomIndex]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID
export function getTestProfileById(userId) {
  return testProfiles.find(profile => profile.userData.id === userId) || testProfiles[0]
}

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ Telegram WebApp –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export const mockTelegramWebApp = {
  ready: () => console.log('Telegram WebApp ready (mock)'),
  expand: () => console.log('Telegram WebApp expanded (mock)'),
  close: () => console.log('Telegram WebApp closed (mock)'),
  sendData: (data) => console.log('Sending data to bot (mock):', data),
  
  MainButton: {
    text: '–ó–∞–∫—Ä—ã—Ç—å',
    show: () => console.log('Main button shown (mock)'),
    hide: () => console.log('Main button hidden (mock)'),
    setText: (text) => console.log('Main button text set (mock):', text),
    onClick: (callback) => {
      console.log('Main button click handler set (mock)')
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (typeof window !== 'undefined') {
        const button = document.createElement('button')
        button.textContent = '–ó–∞–∫—Ä—ã—Ç—å (—Ç–µ—Å—Ç)'
        button.style.position = 'fixed'
        button.style.bottom = '20px'
        button.style.right = '20px'
        button.style.zIndex = '9999'
        button.style.padding = '10px 20px'
        button.style.backgroundColor = '#2196F3'
        button.style.color = 'white'
        button.style.border = 'none'
        button.style.borderRadius = '5px'
        button.style.cursor = 'pointer'
        button.onclick = callback
        document.body.appendChild(button)
      }
    }
  },
  
  HapticFeedback: {
    impactOccurred: (style) => console.log('Haptic feedback (mock):', style)
  },
  
  themeParams: {
    bg_color: '#17212b',
    text_color: '#ffffff',
    hint_color: '#708499',
    button_color: '#5288c1',
    button_text_color: '#ffffff'
  },
  
  initDataUnsafe: {
    user: null // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export function initializeMockTelegram() {
  if (!shouldEnableMocks()) return
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  let testProfile
  
  if (devConfig.fixedUserId) {
    testProfile = getTestProfileById(devConfig.fixedUserId)
    devLog('data', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testProfile.userData)
  } else if (devConfig.randomUserOnStart) {
    testProfile = getRandomTestProfile()
    devLog('data', '–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testProfile.userData)
  } else {
    testProfile = testProfiles[0]
    devLog('data', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testProfile.userData)
  }
  
  mockTelegramWebApp.initDataUnsafe.user = testProfile.userData
  
  window.Telegram = {
    WebApp: mockTelegramWebApp
  }
  
  devLog('telegram', 'Telegram WebApp mock –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  devLog('user', '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testProfile.userData)
  devLog('data', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑–∏—Ç–∫–∏:', testProfile.settings)
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (shouldShowDevTools()) {
    if (devConfig.showUserSwitcher) {
      addUserSwitcher()
    }
    
    if (devConfig.showMockCloseButton) {
      addMockCloseButton()
    }
    
    addDevInfoPanel()
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
function addUserSwitcher() {
  if (typeof window === 'undefined') return
  
  const position = getPositionStyle(devConfig.ui.switcherPosition)
  
  const switcher = document.createElement('div')
  switcher.id = 'dev-user-switcher'
  switcher.style.position = 'fixed'
  switcher.style.top = position.top
  switcher.style.left = position.left
  switcher.style.right = position.right
  switcher.style.bottom = position.bottom
  switcher.style.zIndex = '9999'
  switcher.style.backgroundColor = 'rgba(0,0,0,0.9)'
  switcher.style.color = 'white'
  switcher.style.padding = '10px'
  switcher.style.borderRadius = '8px'
  switcher.style.fontSize = '12px'
  switcher.style.fontFamily = 'monospace'
  switcher.style.minWidth = '200px'
  switcher.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)'
  
  const label = document.createElement('div')
  label.innerHTML = 'üß™ <strong>DEV MODE</strong>'
  label.style.marginBottom = '8px'
  label.style.fontSize = '11px'
  label.style.opacity = '0.8'
  
  const select = document.createElement('select')
  select.style.width = '100%'
  select.style.padding = '6px'
  select.style.backgroundColor = '#333'
  select.style.color = 'white'
  select.style.border = '1px solid #555'
  select.style.borderRadius = '4px'
  select.style.fontSize = '11px'
  
  testUsers.forEach((user, index) => {
    const option = document.createElement('option')
    option.value = index
    option.textContent = `${user.first_name} ${user.last_name} (@${user.username})`
    if (mockTelegramWebApp.initDataUnsafe.user?.id === user.id) {
      option.selected = true
    }
    select.appendChild(option)
  })
  
  select.addEventListener('change', (e) => {
    const selectedIndex = parseInt(e.target.value)
    const newProfile = testProfiles[selectedIndex]
    
    mockTelegramWebApp.initDataUnsafe.user = newProfile.userData
    
    devLog('user', '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', newProfile.userData)
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    window.location.reload()
  })
  
  switcher.appendChild(label)
  switcher.appendChild(select)
  document.body.appendChild(switcher)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
function addMockCloseButton() {
  if (typeof window === 'undefined') return
  
  const button = document.createElement('button')
  button.textContent = '‚úï –ó–∞–∫—Ä—ã—Ç—å'
  button.style.position = 'fixed'
  button.style.bottom = '20px'
  button.style.right = '20px'
  button.style.zIndex = '9998'
  button.style.padding = '12px 20px'
  button.style.backgroundColor = '#5288c1'
  button.style.color = 'white'
  button.style.border = 'none'
  button.style.borderRadius = '8px'
  button.style.cursor = 'pointer'
  button.style.fontSize = '14px'
  button.style.fontWeight = 'bold'
  button.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)'
  button.style.transition = 'all 0.2s ease'
  
  button.addEventListener('mouseenter', () => {
    button.style.backgroundColor = '#4a7ba7'
    button.style.transform = 'translateY(-2px)'
  })
  
  button.addEventListener('mouseleave', () => {
    button.style.backgroundColor = '#5288c1'
    button.style.transform = 'translateY(0)'
  })
  
  button.onclick = () => {
    devLog('telegram', 'Mock close button clicked')
    alert('–í —Ä–µ–∞–ª—å–Ω–æ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è')
  }
  
  document.body.appendChild(button)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
function addDevInfoPanel() {
  if (typeof window === 'undefined') return
  
  const panel = document.createElement('div')
  panel.id = 'dev-info-panel'
  panel.style.position = 'fixed'
  panel.style.bottom = '20px'
  panel.style.left = '20px'
  panel.style.zIndex = '9997'
  panel.style.backgroundColor = 'rgba(0,0,0,0.8)'
  panel.style.color = 'white'
  panel.style.padding = '8px 12px'
  panel.style.borderRadius = '6px'
  panel.style.fontSize = '10px'
  panel.style.fontFamily = 'monospace'
  panel.style.maxWidth = '200px'
  panel.style.opacity = '0.7'
  
  const currentUser = mockTelegramWebApp.initDataUnsafe.user
  panel.innerHTML = `
    <div>üë§ ${currentUser?.first_name} ${currentUser?.last_name}</div>
    <div>üÜî ID: ${currentUser?.id}</div>
    <div>üì± @${currentUser?.username || '–Ω–µ—Ç'}</div>
    <div style="margin-top: 4px; opacity: 0.6;">npm run dev</div>
  `
  
  document.body.appendChild(panel)
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function getPositionStyle(position) {
  const positions = {
    'top-left': { top: '20px', left: '20px', right: 'auto', bottom: 'auto' },
    'top-right': { top: '20px', right: '20px', left: 'auto', bottom: 'auto' },
    'bottom-left': { bottom: '80px', left: '20px', top: 'auto', right: 'auto' },
    'bottom-right': { bottom: '80px', right: '20px', top: 'auto', left: 'auto' }
  }
  
  return positions[position] || positions['top-left']
} 